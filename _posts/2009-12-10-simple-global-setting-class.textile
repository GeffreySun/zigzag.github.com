---
layout: post
title: A Simple Global Setting class
---

h1. {{ page.title }}

p(meta). 10 Dec 2008 - Beijing

Almost in every web application, the administrator user need to setup some system parameters on the fly.
These parameter settings are different from the application configuration, which normally stored in the yml files under the config directory. Some of the developers incline to create a SystemProperties or GlobalSetting migration and store such properties into DB. 
But for most of the simple situations, the YAML file still work fine. We just need to wrap it a little just like a GlobalSetting class.

So that you can save your <code>params</code> got from controller directly like:
<code class="ruby">GlobalSetting.save param[:setting]</code>
And retrieve them just by:
<code class="ruby">GlobalSetting[:TAX_RATE]</code>
The setting hash you save can have more complex structure combined by arrays or other hashes.
like <code class="ruby">GlobalSetting.save {:ACCOUNT => {:TAX_RATE => 0.2}}</code>
Instead of using <code class="ruby">GlobalSetting[:ACCOUNT] && GlobalSetting[:ACCOUNT][:TAX_RATE]</code> for avoiding the NoMethodError,
we have a more DRY way: <code class="ruby">GlobalSetting[:ACCOUNT, :TAX_RATE]</code>.

h2. Source Code of global_setting.rb

<pre><code class="ruby">
  class GlobalSetting
    cattr_accessor :file_path
    self.file_path = File.join(RAILS_ROOT,'config','setting.yml')

    def self.[](*keys)
      keys.inject(setting){ |m,k| m[k] if m.is_a?(Array) || m.is_a?(Hash)}
    end

    def self.update(key,value)
      setting[key] = value
      save(setting)
    end

    def self.save(hash = {})
      File.open(file_path,'w+'){|f| f << hash.to_yaml}
      @setting = load
    end

    private
    def self.setting
      @setting ||= load 
    end

    def self.load
      YAML.load_file(file_path)
    end
  end
</code></pre>

h2. The Unit Test Code showing how to use it

<pre><code class="ruby">
  class GlobalSettingTest < ActiveSupport::TestCase
    def setup
      GlobalSetting.file_path = File.join(RAILS_ROOT,'tmp','test_setting.yml')
      GlobalSetting.save :t1 => "v1",:t2 => "v2",:arr => ['a1','a2',3], :h1 => {:nh => "nested" }
    end
    def test_get
      assert_equal("v1", GlobalSetting[:t1])
      assert_equal("v2", GlobalSetting[:t2])
      assert_equal(3, GlobalSetting[:arr][2])
    end
    def test_update
      assert_equal("v1", GlobalSetting[:t1])
      GlobalSetting.update(:t1,"c1")
      assert_equal("c1", GlobalSetting[:t1])
    end
    def test_dig
      assert_equal(3, GlobalSetting[:arr,2])
      assert_equal("nested", GlobalSetting[:h1,:nh])
      assert_nil(GlobalSetting[:t1,:foo,:bar])
      assert_nil(GlobalSetting[:arr,2,:dd])
    end
  end
</code></pre>